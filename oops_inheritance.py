# -*- coding: utf-8 -*-
"""OOPS_Inheritance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14ZDeHXSMVeVAJs23TvuyFtU9-T3HRiMO
"""

# Create an ElectricCar class that inherits from the Car class and includes an additional attribute, battery_size.
class car:
  def __init__(self , name , model ):
    self.name = name
    self.model = model

class ElectricCar(car):
  def __init__(self , name , model , battery):
    super().__init__(name , model)
    self.battery = battery
car1 = ElectricCar('Tesla' , 'Model X' , '75kWh')
print(car1.name , car1.model , car1.battery)

# Create and electic car class that inherits fro the car class and has an additional attribute battery size
class Electriccar(car):
  def __init__ (self , name , model , battery1 ):
    super().__init__(name , model)
    self.battery1 = battery1
car2 = Electriccar('Mahindra' , "Scorpio"  , "100kwh")
print(car2.name , car2.model , car2.battery1)

class HybridCar(car):
  def __init__(self , name , model , battery2 , fuel):
    super().__init__(name , model)
    self.battery2 = battery2
    self.fuel = fuel
car3 = HybridCar('Tata' , 'Nexon EV' , '50kwh' , "petrol")
print(car3.name , car3.model , car3.battery2)

class Petrolcar(car):
  def __init__(self , name , model , mileage):
    super().__init__(name , model)
    self.mileage = mileage

car4 = Petrolcar('Maruti' , 'Swift' , '20kmpl')
print(car4.name , car4.model , car4.mileage)

class Dieselcar(car):
  def __init__(self , name , model , mileage):
    super().__init__(name , model)
    self.mileage = mileage

car5 = Dieselcar('Tata' , 'curvv' , '30kmpl')
print(car5.name , car5.model , car5.mileage)

class Cngcar(car):
  def __init__(self , name , model , mileage):
    super().__init__(name , model)
    self.mileage = mileage

car6 = Cngcar('Mercedes' , 'Gwagon' , '55kmpl')
print(car6.name , car6.model , car6.mileage)

# Define a Laptop class that inherits from the Computer class and includes an additional attribute, battery_life.
class Computer:
  def __init__(self , name , model , price):
    self.name = name
    self.model = model
    self.price = price
com = Computer('Asus' , 'Tuf A15' , 'Rs. 65,000')
print(com.name , com.model , com.price)
class Laptop(Computer):
  def __init__(self , name , model , price , battery_life):
    super().__init__(name , model , price)
    self.battery_life = battery_life
com1 = Laptop('Asus' , 'Tuf A15' , 'Rs. 65,000' , '8hrs')
print(com1.name , com1.model , com1.price , com1.battery_life)

# Create a Smartphone class and add another child class of your choice that inherits from an ElectronicDevice class. Include an additional attribute, operating_system.
class Electronicdevice:
  def __init__(self , company , model , price):
    self.company = company
    self.model = model
    self.price = price
ed = Electronicdevice(' MSI ' , 'MPG 321URX ', '$949.99')
print(ed.company , ed.model , ed.price)
class Smartphone:
  def __init__(self ,  company , model , price ):
    self.company = company
    self.model = model
    self.price = price

ph = Smartphone('Vivo' , 'V23' , '25,000' )
print(ph.company , ph.model , ph.price )

class Iphone(Smartphone):
  def __init__(self , company , model , price , processor):
    super().__init__(company , model , price )
    self.processor = processor
iph = Iphone('Apple' , '15 pro max' , '1,59,900' , 'Apple A17 Pro')
print(iph.company , iph.model , iph.price , iph.processor)

# Implement a Musician class and create another child class of your choice that extends an Artist class. Include an additional attribute, instrument_played.
class Artist:
    def __init__(self, name, genre, birth_year):
        self.name = name
        self.genre = genre
        self.birth_year = birth_year

class Musician(Artist):
    def __init__(self, name, genre, birth_year, instrument_played):
        super().__init__(name, genre, birth_year)
        self.instrument_played = instrument_played

mu = Musician('Lata mangeshkar' , 'Playback Singing' , 1929 , 'Voice')
print(mu.name , mu.genre , mu.birth_year , mu.instrument_played)

# Define a FictionBook class and add another child class of your choice that inherits from the Book class. Include an additional attribute, genre.
class Book:
  def __init__(self , name , author , price , genre):
    self.name = name
    self.author = author
    self.price = price
    self.genre = genre
class FictionBook(Book):
  def __init__(self , name , author , price , genre , pages):
    super().__init__(name , author , price , genre)
    self.pages = pages
fb = FictionBook('Don Quixote' , 'Miguel de Cervantes' , 'â‚¹1,276' , 'Modern Novel' , 1072)
print(fb.name , fb.author , fb.price , fb.genre , fb.pages)
class Manga(Book):
  def __init__(self , name , author , price  , genre, chapters):
    super().__init__(name, author, price , genre)
    self.chapters = chapters

# Create a student class that takes the name & marks of 3 subjects as arguments in the constructor. Then create a method to print the average.
class Student:
    def __init__(self, name, marks):
        self.name = name
        self.marks = marks
    def average(self):
      average = sum(self.marks) / len(self.marks)

      return print(f"Average marks for {self.name}: {average}")

student1 = Student("Alice", [85, 92, 78])
student1.average()